// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: lobby.proto

package lobby

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lobby_Login_FullMethodName        = "/Lobby/Login"
	Lobby_RefreshToken_FullMethodName = "/Lobby/RefreshToken"
	Lobby_JoinLobby_FullMethodName    = "/Lobby/JoinLobby"
	Lobby_LeaveLobby_FullMethodName   = "/Lobby/LeaveLobby"
	Lobby_GetUsers_FullMethodName     = "/Lobby/GetUsers"
	Lobby_Register_FullMethodName     = "/Lobby/Register"
	Lobby_Roll_FullMethodName         = "/Lobby/Roll"
)

// LobbyClient is the client API for Lobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the gRPC service with necessary RPC calls
type LobbyClient interface {
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	JoinLobby(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	LeaveLobby(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	GetUsers(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	Register(ctx context.Context, in *NewUserMessage, opts ...grpc.CallOption) (*LoginResponse, error)
	Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error)
}

type lobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyClient(cc grpc.ClientConnInterface) LobbyClient {
	return &lobbyClient{cc}
}

func (c *lobbyClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Lobby_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Lobby_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) JoinLobby(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, Lobby_JoinLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveLobby(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, Lobby_LeaveLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GetUsers(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, Lobby_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Register(ctx context.Context, in *NewUserMessage, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Lobby_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollResponse)
	err := c.cc.Invoke(ctx, Lobby_Roll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServer is the server API for Lobby service.
// All implementations must embed UnimplementedLobbyServer
// for forward compatibility.
//
// Define the gRPC service with necessary RPC calls
type LobbyServer interface {
	Login(context.Context, *UserLoginRequest) (*LoginResponse, error)
	RefreshToken(context.Context, *TokenRequest) (*LoginResponse, error)
	JoinLobby(context.Context, *TokenRequest) (*JoinResponse, error)
	LeaveLobby(context.Context, *TokenRequest) (*LeaveResponse, error)
	GetUsers(context.Context, *TokenRequest) (*UserListResponse, error)
	Register(context.Context, *NewUserMessage) (*LoginResponse, error)
	Roll(context.Context, *RollRequest) (*RollResponse, error)
	mustEmbedUnimplementedLobbyServer()
}

// UnimplementedLobbyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLobbyServer struct{}

func (UnimplementedLobbyServer) Login(context.Context, *UserLoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLobbyServer) RefreshToken(context.Context, *TokenRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedLobbyServer) JoinLobby(context.Context, *TokenRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLobby not implemented")
}
func (UnimplementedLobbyServer) LeaveLobby(context.Context, *TokenRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLobby not implemented")
}
func (UnimplementedLobbyServer) GetUsers(context.Context, *TokenRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedLobbyServer) Register(context.Context, *NewUserMessage) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedLobbyServer) Roll(context.Context, *RollRequest) (*RollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roll not implemented")
}
func (UnimplementedLobbyServer) mustEmbedUnimplementedLobbyServer() {}
func (UnimplementedLobbyServer) testEmbeddedByValue()               {}

// UnsafeLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServer will
// result in compilation errors.
type UnsafeLobbyServer interface {
	mustEmbedUnimplementedLobbyServer()
}

func RegisterLobbyServer(s grpc.ServiceRegistrar, srv LobbyServer) {
	// If the following call pancis, it indicates UnimplementedLobbyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lobby_ServiceDesc, srv)
}

func _Lobby_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_JoinLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).JoinLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_JoinLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).JoinLobby(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_LeaveLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveLobby(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GetUsers(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Register(ctx, req.(*NewUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Roll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Roll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_Roll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Roll(ctx, req.(*RollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lobby_ServiceDesc is the grpc.ServiceDesc for Lobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Lobby",
	HandlerType: (*LobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Lobby_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Lobby_RefreshToken_Handler,
		},
		{
			MethodName: "JoinLobby",
			Handler:    _Lobby_JoinLobby_Handler,
		},
		{
			MethodName: "LeaveLobby",
			Handler:    _Lobby_LeaveLobby_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Lobby_GetUsers_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Lobby_Register_Handler,
		},
		{
			MethodName: "Roll",
			Handler:    _Lobby_Roll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lobby.proto",
}
