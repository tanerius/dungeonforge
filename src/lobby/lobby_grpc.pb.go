// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: lobby/lobby.proto

package lobby

import (
	context "context"
	common "github.com/tanerius/dungeonforge/src/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LobbyService_GetServiceInfo_FullMethodName = "/LobbyService/GetServiceInfo"
	LobbyService_GetUsers_FullMethodName       = "/LobbyService/GetUsers"
	LobbyService_JoinLobby_FullMethodName      = "/LobbyService/JoinLobby"
	LobbyService_LeaveLobby_FullMethodName     = "/LobbyService/LeaveLobby"
	LobbyService_Roll_FullMethodName           = "/LobbyService/Roll"
)

// LobbyServiceClient is the client API for LobbyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the gRPC service with necessary RPC calls
type LobbyServiceClient interface {
	GetServiceInfo(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*LobbyInfoResponse, error)
	GetUsers(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	JoinLobby(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	LeaveLobby(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error)
}

type lobbyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyServiceClient(cc grpc.ClientConnInterface) LobbyServiceClient {
	return &lobbyServiceClient{cc}
}

func (c *lobbyServiceClient) GetServiceInfo(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*LobbyInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LobbyInfoResponse)
	err := c.cc.Invoke(ctx, LobbyService_GetServiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) GetUsers(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, LobbyService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) JoinLobby(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, LobbyService_JoinLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) LeaveLobby(ctx context.Context, in *common.TokenRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, LobbyService_LeaveLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyServiceClient) Roll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollResponse)
	err := c.cc.Invoke(ctx, LobbyService_Roll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServiceServer is the server API for LobbyService service.
// All implementations must embed UnimplementedLobbyServiceServer
// for forward compatibility.
//
// Define the gRPC service with necessary RPC calls
type LobbyServiceServer interface {
	GetServiceInfo(context.Context, *common.TokenRequest) (*LobbyInfoResponse, error)
	GetUsers(context.Context, *common.TokenRequest) (*UserListResponse, error)
	JoinLobby(context.Context, *common.TokenRequest) (*JoinResponse, error)
	LeaveLobby(context.Context, *common.TokenRequest) (*LeaveResponse, error)
	Roll(context.Context, *RollRequest) (*RollResponse, error)
	mustEmbedUnimplementedLobbyServiceServer()
}

// UnimplementedLobbyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLobbyServiceServer struct{}

func (UnimplementedLobbyServiceServer) GetServiceInfo(context.Context, *common.TokenRequest) (*LobbyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedLobbyServiceServer) GetUsers(context.Context, *common.TokenRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedLobbyServiceServer) JoinLobby(context.Context, *common.TokenRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLobby not implemented")
}
func (UnimplementedLobbyServiceServer) LeaveLobby(context.Context, *common.TokenRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLobby not implemented")
}
func (UnimplementedLobbyServiceServer) Roll(context.Context, *RollRequest) (*RollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roll not implemented")
}
func (UnimplementedLobbyServiceServer) mustEmbedUnimplementedLobbyServiceServer() {}
func (UnimplementedLobbyServiceServer) testEmbeddedByValue()                      {}

// UnsafeLobbyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServiceServer will
// result in compilation errors.
type UnsafeLobbyServiceServer interface {
	mustEmbedUnimplementedLobbyServiceServer()
}

func RegisterLobbyServiceServer(s grpc.ServiceRegistrar, srv LobbyServiceServer) {
	// If the following call pancis, it indicates UnimplementedLobbyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LobbyService_ServiceDesc, srv)
}

func _LobbyService_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_GetServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).GetServiceInfo(ctx, req.(*common.TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).GetUsers(ctx, req.(*common.TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_JoinLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).JoinLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_JoinLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).JoinLobby(ctx, req.(*common.TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_LeaveLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).LeaveLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_LeaveLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).LeaveLobby(ctx, req.(*common.TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbyService_Roll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServiceServer).Roll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbyService_Roll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServiceServer).Roll(ctx, req.(*RollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LobbyService_ServiceDesc is the grpc.ServiceDesc for LobbyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LobbyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LobbyService",
	HandlerType: (*LobbyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _LobbyService_GetServiceInfo_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _LobbyService_GetUsers_Handler,
		},
		{
			MethodName: "JoinLobby",
			Handler:    _LobbyService_JoinLobby_Handler,
		},
		{
			MethodName: "LeaveLobby",
			Handler:    _LobbyService_LeaveLobby_Handler,
		},
		{
			MethodName: "Roll",
			Handler:    _LobbyService_Roll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lobby/lobby.proto",
}
